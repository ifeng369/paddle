


name: paddle-build
on: push

env:
  PADDLE_VERSION: "3.1.0"
  PADDLE_BRANCH: "v3.1.0"

jobs:
  build-all:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: windows-2022, name: win_cu129_cudnn99_sm120, cuda: 12.9.0, cudnn: 9.9.0.52,python: "3.10", cmake_flags: "-DCMAKE_BUILD_TYPE=Release -DWITH_GPU=ON -DWITH_SHARED_PHI=ON -DWITH_TENSORRT=ON -DWITH_OPENVINO=OFF -DWITH_ROCM=OFF -DWITH_CINN=ON -DWITH_DISTRIBUTE=ON -DWITH_MKL=ON -DWITH_AVX=ON -DCUDA_ARCH_NAME=Manual -DWITH_PYTHON=ON -DWITH_TESTING=OFF -DWITH_COVERAGE=OFF -DWITH_INCREMENTAL_COVERAGE=OFF  -DWITH_PSCORE=ON -DWITH_PSLIB=OFF -DWITH_GLOO=ON -DWITH_XPU=OFF -DWITH_IPU=OFF -DXPU_SDK_ROOT= -DWITH_XPU_BKCL=OFF -DWITH_XPU_XHPC=OFF -DWITH_XPU_XFT=OFF -DWITH_XPU_XRE5=OFF -DWITH_XPU_FFT=OFF -DWITH_ARM=OFF -DWITH_STRIP=ON -DON_INFER=ON -DWITH_HETERPS=ON -DCUDA_ARCH_BIN=120 -DWITH_RECORD_BUILDTIME=OFF -DWITH_UNITY_BUILD=OFF -DWITH_ONNXRUNTIME=OFF -DWITH_CUDNN_FRONTEND=OFF -DWITH_CPP_TEST=OFF -DFA_BUILD_WITH_CACHE=OFF" }
          # - { os: ubuntu-22.04,     name: cu129_cudnn910_sm120, cuda: 12.9.0, cudnn: 9.9.0.52,python: "3.10", cmake_flags: "-DWITH_GPU=ON -DCUDA_ARCH_NAME=Manual -DCUDA_ARCH_BIN=\"120\" -DWITH_ONNXRUNTIME=ON" }
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
    - name: Setup dependencies
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "macOS" ]; then
          pip install numpy protobuf wheel ninja --break-system-packages
        else
          pip install numpy protobuf wheel ninja
        fi

    - uses: Jimver/cuda-toolkit@v0.2.24
      if: ${{ matrix.cuda != '' }}
      id: cuda-toolkit
      with:
        cuda: ${{ matrix.cuda }}
        # Windows sub-packages are kind of different, so we need to handle them separately
        # https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html
        # sub-packages: ${{ matrix.os == 'ubuntu-22.04' && 
        #   '["nvcc"]' || 
        #   '["nvcc", "cublas", "cublas_dev", "cudart", "cufft", "cufft_dev", "curand", "curand_dev", 
        #     "cusparse", "cusparse_dev", "cusolver", "cusolver_dev", "nvrtc", "nvrtc_dev", 
        #     "cuda_profiler_api", "nvjpeg", "nvjpeg_dev", "thrust"]' 
        #   }}
        # non-cuda-sub-packages: ${{ matrix.os == 'ubuntu-22.04' && 
        #   '["libcublas", "libcublas-dev", "libcufft", "libcufft-dev", "libcurand", "libcurand-dev", 
        #     "libcusparse", "libcusparse-dev", "libcusolver", "libcusolver-dev", "libnvrtc", 
        #     "libnvrtc-dev", "profiler_api", "libthrust"]' || 
        #   '[]' }}
        log-file-suffix: ${{ runner.os }}.txt
    
    - name: Download cuDNN
      if: ${{ matrix.cudnn != '' }}
      shell: pwsh
      run: |
        $cudaMajor = '${{ matrix.cuda }}'.Split('.')[0]
        echo "Downloading cuDNN for CUDA $cudaMajor and cuDNN ${{ matrix.cudnn }}..."
        if ("${{ runner.os }}" -eq "Linux") {
          Invoke-WebRequest -Uri https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/linux-x86_64/cudnn-linux-x86_64-${{ matrix.cudnn }}_cuda$cudaMajor-archive.tar.xz -OutFile cudnn.tar.xz
          mkdir cudnn && tar -xf cudnn.tar.xz --strip-components=1 -C cudnn

          sudo cp cudnn/include/* ${{steps.cuda-toolkit.outputs.CUDA_PATH}}/include/
          sudo cp cudnn/lib/* ${{steps.cuda-toolkit.outputs.CUDA_PATH}}/lib64/
        } elseif ("${{ runner.os }}" -eq "Windows") {
          Invoke-WebRequest -Uri https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/windows-x86_64/cudnn-windows-x86_64-${{ matrix.cudnn }}_cuda$cudaMajor-archive.zip -OutFile cudnn.zip
          mkdir cudnn && tar -xf cudnn.zip --strip-components=1 -C cudnn

          cp -Recurse -Force cudnn\* "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
        }
    
        echo "::group:: cuDNN files"
        Get-ChildItem -Recurse cudnn
        echo "::endgroup::"

    - name: Checkout Paddle repo
      uses: actions/checkout@v4
      with:
        repository: PaddlePaddle/Paddle
        ref: "release/3.1"
        path: paddle-src

    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ runner.os == 'Windows' }}
      with:
        toolset: '14.29'

    # - name: Apply patches
    #   shell: pwsh
    #   run: |
    #     cd ./paddle-src
    #     Invoke-WebRequest -Uri https://raw.githubusercontent.com/sdcb/PaddleSharp/refs/heads/feature/3.1/build/capi.patch -OutFile capi.patch
    #     git apply --ignore-whitespace capi.patch
    #     rm capi.patch

    - name: Configure with CMake
      shell: pwsh
      run: |
        pip install -r ./paddle-src/python/requirements.txt
        mkdir ./paddle-src/build
        mkdir ./paddle-src/build/paddle/phi/ops/yaml/inconsistent
        mkdir ./paddle-src/build/paddle/phi/ops/yaml/legacy

        cd ./paddle-src/build
        cmake .. -GNinja ${{ matrix.cmake_flags }}

    - name: Build with Ninja
      run: |
        cd ./paddle-src/build
        ninja all

    # - name: Show build files
    #   shell: bash
    #   run: |
    #     ls -lR ./paddle-src/build

    - name: Upload paddle_whl
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ./paddle-src/build/python/dist/*
